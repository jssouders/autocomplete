var Autocomplete = (function() {
  'use strict'
  function e(e, t, n) {
    return (
      t in e
        ? Object.defineProperty(e, t, {
            value: n,
            enumerable: !0,
            configurable: !0,
            writable: !0,
          })
        : (e[t] = n),
      e
    )
  }
  function t(t) {
    for (var n = 1; n < arguments.length; n++) {
      var s = null != arguments[n] ? arguments[n] : {},
        i = Object.keys(s)
      'function' == typeof Object.getOwnPropertySymbols &&
        (i = i.concat(
          Object.getOwnPropertySymbols(s).filter(function(e) {
            return Object.getOwnPropertyDescriptor(s, e).enumerable
          })
        )),
        i.forEach(function(n) {
          e(t, n, s[n])
        })
    }
    return t
  }
  var n = function(e, t) {
      return e.matches
        ? e.matches(t)
        : e.msMatchesSelector
        ? e.msMatchesSelector(t)
        : e.webkitMatchesSelector
        ? e.webkitMatchesSelector(t)
        : null
    },
    s = function(e, t) {
      return e.closest
        ? e.closest(t)
        : (function(e, t) {
            for (var s = e; s && 1 === s.nodeType; ) {
              if (n(s, t)) return s
              s = s.parentNode
            }
            return null
          })(e, t)
    },
    i = function t() {
      var n,
        i = this,
        o = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
        r = o.search,
        a = o.autoSelect,
        l = void 0 !== a && a,
        u = o.setValue,
        d = void 0 === u ? function() {} : u,
        c = o.setAttribute,
        h = void 0 === c ? function() {} : c,
        p = o.onUpdate,
        f = void 0 === p ? function() {} : p,
        v = o.onSubmit,
        b = void 0 === v ? function() {} : v,
        m = o.onShow,
        g = void 0 === m ? function() {} : m,
        w = o.onHide,
        x = void 0 === w ? function() {} : w,
        y = o.onLoading,
        L = void 0 === y ? function() {} : y,
        R = o.onLoaded,
        S = void 0 === R ? function() {} : R
      !(function(e, t) {
        if (!(e instanceof t))
          throw new TypeError('Cannot call a class as a function')
      })(this, t),
        e(this, 'value', ''),
        e(this, 'searchCounter', 0),
        e(this, 'results', []),
        e(this, 'selectedIndex', -1),
        e(this, 'handleInput', function(e) {
          var t = e.target.value
          i.updateResults(t), (i.value = t)
        }),
        e(this, 'handleKeyDown', function(e) {
          var t = e.key
          switch (t) {
            case 'Up':
            case 'Down':
            case 'ArrowUp':
            case 'ArrowDown':
              var n =
                'ArrowUp' === t || 'Up' === t
                  ? i.selectedIndex - 1
                  : i.selectedIndex + 1
              e.preventDefault(), i.handleArrows(n)
              break
            case 'Tab':
              i.selectResult()
              break
            case 'Enter':
              var s = i.results[i.selectedIndex]
              i.selectResult(), i.onSubmit(s)
              break
            case 'Esc':
            case 'Escape':
              i.hideResults(), i.setValue()
              break
            default:
              return
          }
        }),
        e(this, 'handleFocus', function(e) {
          var t = e.target.value
          i.updateResults(t), (i.value = t)
        }),
        e(this, 'handleBlur', function() {
          i.hideResults()
        }),
        e(this, 'handleResultMouseDown', function(e) {
          e.preventDefault()
        }),
        e(this, 'handleResultClick', function(e) {
          var t = e.target,
            n = s(t, '[data-result-index]')
          if (n) {
            i.selectedIndex = parseInt(n.dataset.resultIndex, 10)
            var o = i.results[i.selectedIndex]
            i.selectResult(), i.onSubmit(o)
          }
        }),
        e(this, 'handleArrows', function(e) {
          var t = i.results.length
          ;(i.selectedIndex = ((e % t) + t) % t),
            i.onUpdate(i.results, i.selectedIndex)
        }),
        e(this, 'selectResult', function() {
          var e = i.results[i.selectedIndex]
          e && i.setValue(e), i.hideResults()
        }),
        e(this, 'updateResults', function(e) {
          var t = ++i.searchCounter
          i.onLoading(),
            i.search(e).then(function(e) {
              t === i.searchCounter &&
                ((i.results = e),
                i.onLoaded(),
                0 !== i.results.length
                  ? ((i.selectedIndex = i.autoSelect ? 0 : -1),
                    i.onUpdate(i.results, i.selectedIndex),
                    i.showResults())
                  : i.hideResults())
            })
        }),
        e(this, 'showResults', function() {
          i.setAttribute('aria-expanded', !0), i.onShow()
        }),
        e(this, 'hideResults', function() {
          (i.selectedIndex = -1),
            (i.results = []),
            i.setAttribute('aria-expanded', !1),
            i.setAttribute('aria-activedescendant', ''),
            i.onUpdate(i.results, i.selectedIndex),
            i.onHide()
        }),
        e(this, 'checkSelectedResultVisible', function(e) {
          var t = e.querySelector(
            '[data-result-index="'.concat(i.selectedIndex, '"]')
          )
          if (t) {
            var n = e.getBoundingClientRect(),
              s = t.getBoundingClientRect()
            s.top < n.top
              ? (e.scrollTop -= n.top - s.top)
              : s.bottom > n.bottom && (e.scrollTop += s.bottom - n.bottom)
          }
        }),
        (this.search =
          ((n = r),
          n && 'function' == typeof n.then
            ? r
            : function(e) {
                return Promise.resolve(r(e))
              })),
        (this.autoSelect = l),
        (this.setValue = d),
        (this.setAttribute = h),
        (this.onUpdate = f),
        (this.onSubmit = b),
        (this.onShow = g),
        (this.onHide = x),
        (this.onLoading = L),
        (this.onLoaded = S)
    },
    o = 0,
    r = function() {
      var e =
        arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ''
      return ''.concat(e).concat(++o)
    }
  var a = (function(e, t, n, s, i, o, r, a, l, u) {
    'boolean' != typeof r && ((l = a), (a = r), (r = !1))
    var d,
      c = 'function' == typeof n ? n.options : n
    if (
      (e &&
        e.render &&
        ((c.render = e.render),
        (c.staticRenderFns = e.staticRenderFns),
        (c._compiled = !0),
        i && (c.functional = !0)),
      s && (c._scopeId = s),
      o
        ? ((d = function(e) {
            (e =
              e ||
              (this.$vnode && this.$vnode.ssrContext) ||
              (this.parent &&
                this.parent.$vnode &&
                this.parent.$vnode.ssrContext)) ||
              'undefined' == typeof __VUE_SSR_CONTEXT__ ||
              (e = __VUE_SSR_CONTEXT__),
              t && t.call(this, l(e)),
              e && e._registeredComponents && e._registeredComponents.add(o)
          }),
          (c._ssrRegister = d))
        : t &&
          (d = r
            ? function() {
                t.call(this, u(this.$root.$options.shadowRoot))
              }
            : function(e) {
                t.call(this, a(e))
              }),
      d)
    )
      if (c.functional) {
        var h = c.render
        c.render = function(e, t) {
          return d.call(t), h(e, t)
        }
      } else {
        var p = c.beforeCreate
        c.beforeCreate = p ? [].concat(p, d) : [d]
      }
    return n
  })(
    {
      render: function() {
        var e = this,
          t = e.$createElement,
          n = e._self._c || t
        return n(
          'div',
          { ref: 'root' },
          [
            e._t(
              'default',
              [
                n('div', e._b({}, 'div', e.rootProps, !1), [
                  n(
                    'input',
                    e._g(
                      e._b(
                        {
                          ref: 'input',
                          on: {
                            input: e.handleInput,
                            keydown: e.core.handleKeyDown,
                            focus: e.core.handleFocus,
                            blur: e.core.handleBlur,
                          },
                        },
                        'input',
                        e.inputProps,
                        !1
                      ),
                      e.$listeners
                    )
                  ),
                  e._v(' '),
                  n(
                    'ul',
                    e._g(
                      e._b({ ref: 'resultList' }, 'ul', e.resultListProps, !1),
                      e.resultListListeners
                    ),
                    [
                      e._l(e.results, function(t, s) {
                        return [
                          e._t(
                            'result',
                            [
                              n(
                                'li',
                                e._b(
                                  { key: e.resultProps[s].id },
                                  'li',
                                  e.resultProps[s],
                                  !1
                                ),
                                [
                                  e._v(
                                    '\n              ' +
                                      e._s(e.getResultValue(t)) +
                                      '\n            '
                                  ),
                                ]
                              ),
                            ],
                            { result: t, props: e.resultProps[s] }
                          ),
                        ]
                      }),
                    ],
                    2
                  ),
                ]),
              ],
              {
                rootProps: e.rootProps,
                inputProps: e.inputProps,
                inputListeners: e.inputListeners,
                resultListProps: e.resultListProps,
                resultListListeners: e.resultListListeners,
                results: e.results,
                resultProps: e.resultProps,
              }
            ),
          ],
          2
        )
      },
      staticRenderFns: [],
    },
    void 0,
    {
      name: 'Autocomplete',
      inheritAttrs: !1,
      props: {
        search: { type: Function, required: !0 },
        baseClass: { type: String, default: 'autocomplete' },
        autoSelect: { type: Boolean, default: !1 },
        getResultValue: {
          type: Function,
          default: function(e) {
            return e
          },
        },
        defaultValue: { type: String, default: '' },
        debounceWaitTime: { type: Number, default: 0 },
      },
      data: function() {
        return {
          core: new i({
            search: this.search,
            autoSelect: this.autoSelect,
            setValue: this.setValue,
            onUpdate: this.handleUpdate,
            onSubmit: this.handleSubmit,
            onShow: this.handleShow,
            onHide: this.handleHide,
            onLoading: this.handleLoading,
            onLoaded: this.handleLoaded,
          }),
          value: this.defaultValue,
          resultListId: r(''.concat(this.baseClass, '-result-list-')),
          results: [],
          selectedIndex: -1,
          expanded: !1,
          loading: !1,
          position: 'below',
          resetPosition: !0,
        }
      },
      computed: {
        rootProps: function() {
          return {
            class: this.baseClass,
            style: { position: 'relative' },
            'data-expanded': this.expanded,
            'data-loading': this.loading,
            'data-position': this.position,
          }
        },
        inputProps: function() {
          return t(
            {
              class: ''.concat(this.baseClass, '-input'),
              value: this.value,
              role: 'combobox',
              autocomplete: 'off',
              autocapitalize: 'off',
              autocorrect: 'off',
              spellcheck: 'false',
              'aria-autocomplete': 'list',
              'aria-haspopup': 'listbox',
              'aria-owns': this.resultListId,
              'aria-expanded': this.expanded ? 'true' : 'false',
              'aria-activedescendant':
                this.selectedIndex > -1
                  ? this.resultProps[this.selectedIndex].id
                  : '',
            },
            this.$attrs
          )
        },
        inputListeners: function() {
          return {
            input:
              0 === this.debounceWaitTime
                ? this.handleInput
                : ((e = this.handleInput),
                  (t = this.debounceWaitTime),
                  function() {
                    var i = this,
                      o = arguments,
                      r = n && !s
                    clearTimeout(s),
                      (s = setTimeout(function() {
                        (s = null), n || e.apply(i, o)
                      }, t)),
                      r && e.apply(i, o)
                  }),
            keydown: this.core.handleKeyDown,
            focus: this.core.handleFocus,
            blur: this.core.handleBlur,
          }
          var e, t, n, s
        },
        resultListProps: function() {
          var t = 'below' === this.position ? 'top' : 'bottom'
          return {
            id: this.resultListId,
            class: ''.concat(this.baseClass, '-result-list'),
            role: 'listbox',
            style: e(
              {
                position: 'absolute',
                zIndex: 1,
                width: '100%',
                visibility: this.expanded ? 'visible' : 'hidden',
                pointerEvents: this.expanded ? 'auto' : 'none',
              },
              t,
              '100%'
            ),
          }
        },
        resultListListeners: function() {
          return {
            mousedown: this.core.handleResultMouseDown,
            click: this.core.handleResultClick,
          }
        },
        resultProps: function() {
          var e = this
          return this.results.map(function(n, s) {
            return t(
              {
                id: ''.concat(e.baseClass, '-result-').concat(s),
                class: ''.concat(e.baseClass, '-result'),
                'data-result-index': s,
                role: 'option',
              },
              e.selectedIndex === s ? { 'aria-selected': 'true' } : {}
            )
          })
        },
      },
      mounted: function() {
        document.body.addEventListener('click', this.handleDocumentClick)
      },
      beforeDestroy: function() {
        document.body.removeEventListener('click', this.handleDocumentClick)
      },
      updated: function() {
        var e, t, n, s
        this.$refs.input &&
          this.$refs.resultList &&
          (this.resetPosition &&
            this.results.length > 0 &&
            ((this.resetPosition = !1),
            (this.position =
              ((e = this.$refs.input),
              (t = this.$refs.resultList),
              (n = e.getBoundingClientRect()),
              (s = t.getBoundingClientRect()),
              n.bottom + s.height > window.innerHeight &&
              window.innerHeight - n.bottom < n.top &&
              window.pageYOffset + n.top - s.height > 0
                ? 'above'
                : 'below'))),
          this.core.checkSelectedResultVisible(this.$refs.resultList))
      },
      methods: {
        setValue: function(e) {
          this.value = e ? this.getResultValue(e) : ''
        },
        handleUpdate: function(e, t) {
          (this.results = e), (this.selectedIndex = t)
        },
        handleShow: function() {
          this.expanded = !0
        },
        handleHide: function() {
          (this.expanded = !1), (this.resetPosition = !0)
        },
        handleLoading: function() {
          this.loading = !0
        },
        handleLoaded: function() {
          this.loading = !1
        },
        handleInput: function(e) {
          (this.value = e.target.value), this.core.handleInput(e)
        },
        handleSubmit: function(e) {
          this.$emit('submit', e)
        },
        handleDocumentClick: function(e) {
          this.$refs.root.contains(e.target) || this.core.hideResults()
        },
      },
    },
    void 0,
    !1,
    void 0,
    void 0,
    void 0
  )
  function l(e) {
    l.installed || ((l.installed = !0), e.component('Autocomplete', a))
  }
  var u,
    d = { install: l }
  return (
    'undefined' != typeof window
      ? (u = window.Vue)
      : 'undefined' != typeof global && (u = global.Vue),
    u && u.use(d),
    (a.install = l),
    a
  )
})()
